Biblioteca <cstring>
strlen

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    const char* str = "Hello, world!";
    std::cout << "Comprimento: " << strlen(str) << std::endl; // Saída: Comprimento: 13
    return 0;
}
strcpy

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    char dest[50];
    const char* src = "Hello, world!";
    strcpy(dest, src);
    std::cout << "Destino: " << dest << std::endl; // Saída: Destino: Hello, world!
    return 0;
}
strncpy

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    char dest[50];
    const char* src = "Hello, world!";
    strncpy(dest, src, 5);
    dest[5] = '\0'; // Garantir que a string seja terminada
    std::cout << "Destino: " << dest << std::endl; // Saída: Destino: Hello
    return 0;
}
strcmp

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    const char* str1 = "Hello";
    const char* str2 = "World";
    int result = strcmp(str1, str2);
    if (result < 0) {
        std::cout << str1 << " é menor que " << str2 << std::endl;
    } else if (result > 0) {
        std::cout << str1 << " é maior que " << str2 << std::endl;
    } else {
        std::cout << str1 << " é igual a " << str2 << std::endl;
    }
    return 0;
}
strncmp

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    const char* str1 = "Hello";
    const char* str2 = "Helium";
    int result = strncmp(str1, str2, 3);
    if (result == 0) {
        std::cout << "Primeiros 3 caracteres são iguais." << std::endl;
    } else {
        std::cout << "Primeiros 3 caracteres são diferentes." << std::endl;
    }
    return 0;
}
strcat

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    char dest[50] = "Hello";
    const char* src = " World!";
    strcat(dest, src);
    std::cout << "Concatenado: " << dest << std::endl; // Saída: Concatenado: Hello World!
    return 0;
}
strncat

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    char dest[50] = "Hello";
    const char* src = " World!";
    strncat(dest, src, 3); // Anexa apenas os primeiros 3 caracteres
    std::cout << "Concatenado: " << dest << std::endl; // Saída: Concatenado: Hello Wor
    return 0;
}
strchr

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    const char* str = "Hello, world!";
    char* p = strchr(str, 'o');
    if (p) {
        std::cout << "Primeira ocorrência de 'o': " << p << std::endl; // Saída: Primeira ocorrência de 'o': o, world!
    } else {
        std::cout << "'o' não encontrado." << std::endl;
    }
    return 0;
}
strrchr

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    const char* str = "Hello, world!";
    char* p = strrchr(str, 'o');
    if (p) {
        std::cout << "Última ocorrência de 'o': " << p << std::endl; // Saída: Última ocorrência de 'o': orld!
    } else {
        std::cout << "'o' não encontrado." << std::endl;
    }
    return 0;
}
strstr

cpp
Copiar código
#include <iostream>
#include <cstring>

int main() {
    const char* str = "Hello, world!";
    const char* substr = "world";
    char* p = strstr(str, substr);
    if (p) {
        std::cout << "Substring encontrada: " << p << std::endl; // Saída: Substring encontrada: world!
    } else {
        std::cout << "Substring não encontrada." << std::endl;
    }
    return 0;
}
Biblioteca <string>
length e size

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello, world!";
    std::cout << "Comprimento: " << str.length() << std::endl; // Saída: Comprimento: 13
    std::cout << "Tamanho: " << str.size() << std::endl; // Saída: Tamanho: 13
    return 0;
}
substr

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello, world!";
    std::string sub = str.substr(7, 5);
    std::cout << "Substring: " << sub << std::endl; // Saída: Substring: world
    return 0;
}
append

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello";
    str.append(", world!");
    std::cout << "Concatenado: " << str << std::endl; // Saída: Concatenado: Hello, world!
    return 0;
}
operator+=

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello";
    str += ", world!";
    std::cout << "Concatenado: " << str << std::endl; // Saída: Concatenado: Hello, world!
    return 0;
}
compare

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str1 = "Hello";
    std::string str2 = "World";
    int result = str1.compare(str2);
    if (result < 0) {
        std::cout << str1 << " é menor que " << str2 << std::endl;
    } else if (result > 0) {
        std::cout << str1 << " é maior que " << str2 << std::endl;
    } else {
        std::cout << str1 << " é igual a " << str2 << std::endl;
    }
    return 0;
}
empty

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "";
    if (str.empty()) {
        std::cout << "A string está vazia." << std::endl; // Saída: A string está vazia.
    } else {
        std::cout << "A string não está vazia." << std::endl;
    }
    return 0;
}
insert

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello!";
    str.insert(5, " world");
    std::cout << "Inserido: " << str << std::endl; // Saída: Inserido: Hello world!
    return 0;
}
erase

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello, world!";
    str.erase(5, 7); // Remove 7 caracteres a partir do índice 5
    std::cout << "Apagado: " << str << std::endl; // Saída: Apagado: Hello!
    return 0;
}
replace

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello, there!";
    str.replace(7, 5, "world"); // Substitui 5 caracteres a partir do índice 7 por "world"
    std::cout << "Substituído: " << str << std::endl; // Saída: Substituído: Hello, world!
    return 0;
}
find

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello, world!";
    size_t pos = str.find("world");
    if (pos != std::string::npos) {
        std::cout << "Substring 'world' encontrada na posição: " << pos << std::endl; // Saída: Substring 'world' encontrada na posição: 7
    } else {
        std::cout << "Substring não encontrada." << std::endl;
    }
    return 0;
}
rfind

cpp
Copiar código
#include <iostream>
#include <string>

int main() {
    std::string str = "Hello, world! Hello again!";
    size_t pos = str.rfind("Hello");
    if (pos != std::string::npos) {
        std::cout << "Última ocorrência de 'Hello' na posição: " << pos << std::endl; // Saída: Última ocorrência de 'Hello' na posição: 13
    } else {
        std::cout << "Substring não encontrada." << std::endl;
    }
    return 0;
}
Esses exemplos devem ajudar a ilustrar como usar essas funções e métodos para manipular e comparar strings em C++! Se precisar de mais detalhes ou ajuda, é só avisar.
